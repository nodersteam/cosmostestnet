#!/bin/bash

while true
do

# Logo
source ~/.bash_profile

echo "============================================================"
curl -s https://raw.githubusercontent.com/AlekseyMoskalev1/script/main/Noders.sh | bash
echo "============================================================"


PS3='Select an action: '
options=(
"Prepare the server for installation" 
"Install GITOPIA Node" 
"Recover wallet"
"Log Node" 
"Check node status" 
"Request for tokens in Discord" 
"Parametrs and balance" 
"Create validator" 
"Check validator"
"Delete node"
"Exit")
select opt in "${options[@]}"
               do
                   case $opt in
                   
"Prepare the server for installation")
echo "============================================================"
echo "Preparation has begun"
echo "============================================================"

#INSTALL DEPEND
echo "============================================================"
echo "Update and install APT"
echo "============================================================"
sleep 3
sudo apt update && sudo apt upgrade -y && \
sudo apt install curl tar wget clang pkg-config libssl-dev libleveldb-dev jq build-essential bsdmainutils git make ncdu htop screen unzip bc fail2ban htop -y

#INSTALL GO
echo "============================================================"
echo "Install GO 1.19.1"
echo "============================================================"
sleep 3
cd $HOME && \
ver="1.19.1" && \
wget "https://golang.org/dl/go$ver.linux-amd64.tar.gz" && \
sudo rm -rf /usr/local/go && \
sudo tar -C /usr/local -xzf "go$ver.linux-amd64.tar.gz" && \
rm "go$ver.linux-amd64.tar.gz" && \
echo "export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin" >> $HOME/.bash_profile && \
source $HOME/.bash_profile

echo "============================================================"
echo "The server is ready!"
echo "============================================================"
break
;;
            
"Install GITOPIA Node")
echo "============================================================"
echo "Set parameters"
echo "============================================================"
echo "Enter NodName:"
echo "============================================================"
                
read NODENAME
NODENAME=$NODENAME
echo 'export NODENAME='${NODENAME} >> $HOME/.bash_profile

echo "============================================================"
echo "Enter WalletName:"
echo "============================================================"
               
read NODEWALLET
NODEWALLET=$NODEWALLET
echo 'export NODEWALLET='${NODEWALLET} >> $HOME/.bash_profile
NODECHAIN=""gitopia-janus-testnet-2""
echo 'export NODECHAIN='${NODECHAIN} >> $HOME/.bash_profile
source $HOME/.bash_profile

echo "============================================================"
echo "Installation started"
echo "============================================================"
cd $HOME
curl https://get.gitopia.com | bash

git clone -b v1.2.0 gitopia://gitopia/gitopia
cd gitopia && make install

gitopiad init $NODENAME --chain-id=$NODECHAIN
gitopiad config chain-id gitopia-janus-testnet-2

wget https://server.gitopia.com/raw/gitopia/testnets/master/gitopia-janus-testnet-2/genesis.json.gz
gunzip genesis.json.gz
mv genesis.json $HOME/.gitopia/config/genesis.json

wget -O $HOME/.gitopia/config/addrbook.json https://raw.githubusercontent.com/nodersteam/cosmostestnet/main/gitopia/addrbook.json

sed -i '' 's#seeds = ""#seeds = "399d4e19186577b04c23296c4f7ecc53e61080cb@seed.gitopia.com:26656"#' $HOME/.gitopia/config/config.toml

sudo tee /etc/systemd/system/gitopiad.service > /dev/null <<EOF
[Unit]
Description=gitopiad
After=network-online.target

[Service]
User=$USER
ExecStart=$(which gitopiad) start
Restart=on-failure
RestartSec=3
LimitNOFILE=65535

[Install]
WantedBy=multi-user.target
EOF

# start service
sudo systemctl daemon-reload
sudo systemctl enable gitopiad
sudo systemctl restart gitopiad
echo "============================================================"
echo "Installation complete!"
echo "============================================================"
break
;;

"Recover wallet")
gitopiad keys add $NODEWALLET --recover
NODEADDRWALL=$(gitopiad keys show $NODEWALLET -a)
NODEVAL=$(gitopiad keys show $NODEWALLET --bech val -a)
echo 'export NODEVAL='${NODEVAL} >> $HOME/.bash_profile
echo 'export NODEADDRWALL='${NODEADDRWALL} >> $HOME/.bash_profile
source $HOME/.bash_profile
echo "============================================================"
echo "Wallet addres: $NODEADDRWALL"
echo "Valoper addres: $NODEVAL"
echo "============================================================"
break
;;

"Check node status")
echo "============================================================"
echo "Synchronization status must be false to continue!"
echo "============================================================"
echo "Synchronization status = $(curl -s localhost:26657/status)"
echo "Block height = $(gitopiad status 2>&1 | jq ."SyncInfo"."latest_block_height")"
echo "Skipped Blocks and Validator Creation Block $(gitopiad q slashing signing-info $(gitopiad tendermint show-validator))"
echo "============================================================"
break
;;
"Create validator")
echo "============================================================"
echo "Synchronization status must be false to continue!"
echo "Synchronization status = $(curl -s localhost:26657/status)"
echo "============================================================"

gitopiad tx staking create-validator \
--amount=1000000utlore \
--pubkey=$(gitopiad tendermint show-validator) \
--moniker="$NODENAME" \
--chain-id=gitopia-janus-testnet-2 \
--commission-rate="0.01" \
--commission-max-rate="0.10" \
--commission-max-change-rate="0.01" \
--min-self-delegation="1000000" \
--from=$NODEWALLET \
--fees 200utlore \
-y
               
break
;;
"Parametrs and balance")
echo "============================================================"
echo "Your parameters"
echo "============================================================"
echo "Name Node: $NODENAME"
echo "Address: $NODEADDRWALL" 
echo "Your balance: $(gitopiad query bank balances $NODEADDRWALL)"
echo "============================================================"
break
;;
"Check validator") 
echo "============================================================"
echo "Account request: $(gitopiad q auth account $(gitopiad keys show $NODEADDRWALL -a) -o text)"
echo "Validator info: $(gitopiad q staking validator $NODEVAL)"
echo "============================================================"
break
;;
"Request for tokens in Discord")
echo "============================================================"
echo "In order to request tokens - you need to connetct your wallet https://gitopia.com/gitopia"
echo "============================================================"
echo -e "Your address $(gitopiad keys export $NODEWALLET)"
echo "============================================================"
break
;;
"Log Node")
journalctl -u gitopiad -f -o cat
break
;;
"Delete node")
systemctl stop gitopiad
systemctl disable gitopiad
rm /etc/systemd/system/gitopiad.service
rm -rf .gitopia gitopia
break
;;
"Exit")
exit
;;
*) echo "invalid option $REPLY";;
esac
done
done
