#!/bin/bash

while true
do

# Logo
source ~/.bash_profile

echo "============================================================"
curl -s https://raw.githubusercontent.com/AlekseyMoskalev1/script/main/Noders.sh | bash
echo "============================================================"


PS3='Select an action: '
options=(
"Prepare the server for installation" 
"Install Mande Node" 
"Create wallet"
"Recover wallet"
"Log Node" 
"Check node status" 
"Request for tokens in Discord" 
"Parametrs and balance" 
"Create validator" 
"Check validator"
"Exit")
select opt in "${options[@]}"
               do
                   case $opt in
                   
"Prepare the server for installation")
echo "============================================================"
echo "Preparation has begun"
echo "============================================================"

#INSTALL DEPEND
echo "============================================================"
echo "Update and install APT"
echo "============================================================"
sleep 3
sudo apt update && sudo apt upgrade -y && \
sudo apt install curl tar wget clang pkg-config libssl-dev libleveldb-dev jq build-essential bsdmainutils git make ncdu htop screen unzip bc fail2ban htop -y

#INSTALL GO
echo "============================================================"
echo "Install GO 1.19.1"
echo "============================================================"
sleep 3
cd $HOME && \
ver="1.19.1" && \
wget "https://golang.org/dl/go$ver.linux-amd64.tar.gz" && \
sudo rm -rf /usr/local/go && \
sudo tar -C /usr/local -xzf "go$ver.linux-amd64.tar.gz" && \
rm "go$ver.linux-amd64.tar.gz" && \
echo "export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin" >> $HOME/.bash_profile && \
source $HOME/.bash_profile

echo "============================================================"
echo "The server is ready!"
echo "============================================================"
break
;;
            
"Install Mande Node")
echo "============================================================"
echo "Set parameters"
echo "============================================================"
echo "Enter NodName:"
echo "============================================================"
                
read NODENAME
NODENAME=$NODENAME
echo 'export NODENAME='${NODENAME} >> $HOME/.bash_profile

echo "============================================================"
echo "Enter WalletName:"
echo "============================================================"
               
read NODEWALLET
NODEWALLET=$NODEWALLET
echo 'export NODEWALLET='${NODEWALLET} >> $HOME/.bash_profile
NODECHAIN=""mande-testnet-1""
echo 'export NODECHAIN='${NODECHAIN} >> $HOME/.bash_profile
source $HOME/.bash_profile

echo "============================================================"
echo "Installation started"
echo "============================================================"
curl -OL https://github.com/mande-labs/testnet-1/raw/main/mande-chaind
mv mande-chaind $HOME/go/bin/
chmod 777 $HOME/go/bin/mande-chaind

mande-chaind init $NODENAME --chain-id=$NODECHAIN
mande-chaind config chain-id mande-testnet-1

wget -O $HOME/.mande-chain/config/genesis.json "https://raw.githubusercontent.com/mande-labs/testnet-1/main/genesis.json"
wget -O $HOME/.mande-chain/config/addrbook.json "https://raw.githubusercontent.com/obajay/nodes-Guides/main/Mande%20Chain/addrbook.json"

sed -i.bak -e "s/^minimum-gas-prices *=.*/minimum-gas-prices = \"0.005mand\"/;" ~/.mande-chain/config/app.toml
external_address=$(wget -qO- eth0.me)
sed -i.bak -e "s/^external_address *=.*/external_address = \"$external_address:26656\"/" $HOME/.mande-chain/config/config.toml
peers="cd3e4f5b7f5680bbd86a96b38bc122aa46668399@34.171.132.212:26656,6780b2648bd2eb6adca2ca92a03a25b216d4f36b@34.170.16.69:26656,a3e3e20528604b26b792055be84e3fd4de70533b@38.242.199.93:24656"
sed -i.bak -e "s/^persistent_peers *=.*/persistent_peers = \"$peers\"/" $HOME/.mande-chain/config/config.toml
seeds="cd3e4f5b7f5680bbd86a96b38bc122aa46668399@34.171.132.212:26656"
sed -i.bak -e "s/^seeds =.*/seeds = \"$seeds\"/" $HOME/.mande-chain/config/config.toml
sed -i -e "s/^filter_peers *=.*/filter_peers = \"true\"/" $HOME/.mande-chain/config/config.toml

pruning="custom" && \
pruning_keep_recent="1000" && \
pruning_keep_every="0" && \
pruning_interval="10" && \
sed -i -e "s/^pruning *=.*/pruning = \"$pruning\"/" $HOME/.mande-chain/config/app.toml && \
sed -i -e "s/^pruning-keep-recent *=.*/pruning-keep-recent = \"$pruning_keep_recent\"/" $HOME/.mande-chain/config/app.toml && \
sed -i -e "s/^pruning-keep-every *=.*/pruning-keep-every = \"$pruning_keep_every\"/" $HOME/.mande-chain/config/app.toml && \
sed -i -e "s/^pruning-interval *=.*/pruning-interval = \"$pruning_interval\"/" $HOME/.mande-chain/config/app.toml


sudo tee /etc/systemd/system/mande-chaind.service > /dev/null <<EOF
[Unit]
Description=mande-chaind
After=network-online.target

[Service]
User=$USER
ExecStart=$(which mande-chaind) start
Restart=on-failure
RestartSec=3
LimitNOFILE=65535

[Install]
WantedBy=multi-user.target
EOF

# start service
sudo systemctl daemon-reload
sudo systemctl enable mande-chaind
sudo systemctl start mande-chaind

echo "============================================================"
echo "Installation complete!"
echo "============================================================"
break
;;

"Recover wallet")

mande-chaind keys add $NODEWALLET --recover
NODEADDRWALL=$(mande-chaind keys show $NODEWALLET -a)
NODEVAL=$(mande-chaind keys show $NODEWALLET --bech val -a)
echo 'export NODEVAL='${NODEVAL} >> $HOME/.bash_profile
echo 'export NODEADDRWALL='${NODEADDRWALL} >> $HOME/.bash_profile
source $HOME/.bash_profile

echo "============================================================"
echo "Wallet addres: $NODEADDRWALL"
echo "Valoper addres: $NODEVAL"
echo "============================================================"

break
;;

"Create wallet")
echo "============================================================"
echo "Save mnemonic!"
echo "============================================================"
               
mande-chaind keys add $NODEWALLET
NODEADDRWALL=$(mande-chaind keys show $NODEWALLET -a)
NODEVAL=$(mande-chaind keys show $NODEWALLET --bech val -a)
echo 'export NODEVAL='${NODEVAL} >> $HOME/.bash_profile
echo 'export NODEADDRWALL='${NODEADDRWALL} >> $HOME/.bash_profile
source $HOME/.bash_profile

echo "============================================================"
echo "Wallet addres: $NODEADDRWALL"
echo "Valoper addres: $NODEVAL"
echo "============================================================"
               
break
;;

"Check node status")
echo "============================================================"
echo "Synchronization status must be false to continue!"
echo "============================================================"
echo "Synchronization status = $(curl -s localhost:26657/status)"
echo "Block height = $(mande-chaind status 2>&1 | jq ."SyncInfo"."latest_block_height")"
echo "Skipped Blocks and Validator Creation Block $(mande-chaind q slashing signing-info $(mande-chaind tendermint show-validator))"
echo "============================================================"
break
;;

"Create validator")
echo "============================================================"
echo "Synchronization status must be false to continue!"
echo "Synchronization status = $(curl -s localhost:26657/status)"
echo "============================================================"
               
mande-chaind tx staking create-validator \
--chain-id mande-testnet-1 \
--amount 0cred \
--pubkey "$(mande-chaind tendermint show-validator)" \
--from $NODEWALLET \
--moniker="$NODENAME" \
--fees 1000mand

break
;;

"Parametrs and balance")
echo "============================================================"
echo "Your parameters"
echo "============================================================"
echo "Name Node: $NODENAME"
echo "Address: $NODEADDRWALL" 
echo "Your balance: $(mande-chaind query bank balances $NODEADDRWALL)"
echo "============================================================"
break
;;

"Check validator") 
echo "============================================================"
echo "Account request: $(mande-chaind q auth account $(mande-chaind keys show $NODEADDRWALL -a) -o text)"
echo "Validator info: $(mande-chaind q staking validator $NODEVAL)"
echo "============================================================"
break
;;

"Request for tokens in Discord")
echo "============================================================"
echo "In order to request tokens - you need to go http://35.224.207.121/portfolio and connect your wallet"
echo "============================================================"
echo -e "Your address $(mande-chaind keys export $NODEWALLET)"
echo "============================================================"
break
;;

"Log Node")
journalctl -u mande-chaind -f -o cat
break
;;

"Delete node")
systemctl stop mande-chaind
systemctl disable mande-chaind
rm /etc/systemd/system/mande-chaind.service
rm -rf .mande mande-chain
break
;;

"Exit")
exit
;;

*) echo "invalid option $REPLY";;
esac
done
done
