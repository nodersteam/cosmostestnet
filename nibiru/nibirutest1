#!/bin/bash

while true
do

# Logo
source ~/.bash_profile

echo "============================================================"
curl -s https://raw.githubusercontent.com/AlekseyMoskalev1/script/main/Noders.sh | bash
echo "============================================================"


PS3='Select an action: '
options=(
"Prepare the server for installation" 
"Install NIBIRU Node" 
"Create wallet"
"Recover wallet"
"Log Node" 
"Check node status" 
"Request for tokens in Discord" 
"Parametrs and balance" 
"Create validator" 
"Check validator"
"Exit")
select opt in "${options[@]}"
               do
                   case $opt in
                   
"Prepare the server for installation")
echo "============================================================"
echo "Preparation has begun"
echo "============================================================"

#INSTALL DEPEND
echo "============================================================"
echo "Update and install APT"
echo "============================================================"
sleep 3
sudo apt update && sudo apt upgrade -y && \
sudo apt install curl tar wget clang pkg-config libssl-dev libleveldb-dev jq build-essential bsdmainutils git make ncdu htop screen unzip bc fail2ban htop -y

#INSTALL GO
echo "============================================================"
echo "Install GO 1.19.1"
echo "============================================================"
sleep 3
cd $HOME && \
ver="1.19.1" && \
wget "https://golang.org/dl/go$ver.linux-amd64.tar.gz" && \
sudo rm -rf /usr/local/go && \
sudo tar -C /usr/local -xzf "go$ver.linux-amd64.tar.gz" && \
rm "go$ver.linux-amd64.tar.gz" && \
echo "export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin" >> $HOME/.bash_profile && \
source $HOME/.bash_profile

echo "============================================================"
echo "The server is ready!"
echo "============================================================"
break
;;
            
"Install NIBIRU Node")
echo "============================================================"
echo "Set parameters"
echo "============================================================"
echo "Enter NodName:"
echo "============================================================"
                
read NODENAME
NODENAME=$NODENAME
echo 'export NODENAME='${NODENAME} >> $HOME/.bash_profile

echo "============================================================"
echo "Enter WalletName:"
echo "============================================================"
               
read NODEWALLET
NODEWALLET=$NODEWALLET
echo 'export NODEWALLET='${NODEWALLET} >> $HOME/.bash_profile
NODECHAIN=""nibiru-testnet-1""
echo 'export NODECHAIN='${NODECHAIN} >> $HOME/.bash_profile
source $HOME/.bash_profile

echo "============================================================"
echo "Installation started"
echo "============================================================"
cd $HOME
git clone https://github.com/NibiruChain/nibiru
cd nibiru
git checkout v0.15.0
make install

nibid init $NODENAME --chain-id=$NODECHAIN
nibid config chain-id nibiru-testnet-1

curl -s https://rpc.testnet-1.nibiru.fi/genesis | jq -r .result.genesis > genesis.json
cp genesis.json $HOME/.nibid/config/genesis.json
wget -O $HOME/.nibid/config/addrbook.json "https://raw.githubusercontent.com/obajay/nodes-Guides/main/Nibiru/addrbook.json"

pruning="custom" && \
pruning_keep_recent="100" && \
pruning_keep_every="0" && \
pruning_interval="10" && \
sed -i -e "s/^pruning *=.*/pruning = \"$pruning\"/" ~/.nibid/config/app.toml && \
sed -i -e "s/^pruning-keep-recent *=.*/pruning-keep-recent = \"$pruning_keep_recent\"/" ~/.nibid/config/app.toml && \
sed -i -e "s/^pruning-keep-every *=.*/pruning-keep-every = \"$pruning_keep_every\"/" ~/.nibid/config/app.toml && \
sed -i -e "s/^pruning-interval *=.*/pruning-interval = \"$pruning_interval\"/" ~/.nibid/config/app.toml

sed -i.bak -e "s/^minimum-gas-prices *=.*/minimum-gas-prices = \"0.0unibi\"/;" ~/.nibid/config/app.toml
sed -i -e "s/^filter_peers *=.*/filter_peers = \"true\"/" $HOME/.nibid/config/config.toml
external_address=$(wget -qO- eth0.me) 
sed -i.bak -e "s/^external_address *=.*/external_address = \"$external_address:26656\"/" $HOME/.nibid/config/config.toml
peers="37713248f21c37a2f022fbbb7228f02862224190@35.243.130.198:26656,ff59bff2d8b8fb6114191af7063e92a9dd637bd9@35.185.114.96:26656,cb431d789fe4c3f94873b0769cb4fce5143daf97@35.227.113.63:26656"
sed -i.bak -e "s/^persistent_peers *=.*/persistent_peers = \"$peers\"/" $HOME/.nibid/config/config.toml
seeds=""
sed -i.bak -e "s/^seeds =.*/seeds = \"$seeds\"/" $HOME/.nibid/config/config.toml
sed -i 's/max_num_inbound_peers =.*/max_num_inbound_peers = 100/g' $HOME/.nibid/config/config.toml
sed -i 's/max_num_outbound_peers =.*/max_num_outbound_peers = 100/g' $HOME/.nibid/config/config.toml

indexer="null" && \
sed -i -e "s/^indexer *=.*/indexer = \"$indexer\"/" $HOME/.nibid/config/config.toml

sudo tee /etc/systemd/system/nibid.service > /dev/null <<EOF
[Unit]
Description=nibiru
After=network-online.target

[Service]
User=$USER
ExecStart=$(which nibid) start
Restart=on-failure
RestartSec=3
LimitNOFILE=65535

[Install]
WantedBy=multi-user.target
EOF

# start service
sudo systemctl daemon-reload
sudo systemctl enable nibid
sudo systemctl restart nibid
echo "============================================================"
echo "Installation complete!"
echo "============================================================"
break
;;
"Recover wallet")
nibid keys add $NODEWALLET --recover
NODEADDRWALL=$(nibid keys show $NODEWALLET -a)
NODEVAL=$(nibid keys show $NODEWALLET --bech val -a)
echo 'export NODEVAL='${NODEVAL} >> $HOME/.bash_profile
echo 'export NODEADDRWALL='${NODEADDRWALL} >> $HOME/.bash_profile
source $HOME/.bash_profile
echo "============================================================"
echo "Wallet addres: $NODEADDRWALL"
echo "Valoper addres: $NODEVAL"
echo "============================================================"
break
;;
"Create wallet")
echo "============================================================"
echo "Save mnemonic!"
echo "============================================================"
               
nibid keys add $NODEWALLET
NODEADDRWALL=$(nibid keys show $NODEWALLET -a)
NODEVAL=$(nibid keys show $NODEWALLET --bech val -a)
echo 'export NODEVAL='${NODEVAL} >> $HOME/.bash_profile
echo 'export NODEADDRWALL='${NODEADDRWALL} >> $HOME/.bash_profile
source $HOME/.bash_profile
echo "============================================================"
echo "Wallet addres: $NODEADDRWALL"
echo "Valoper addres: $NODEVAL"
echo "============================================================"
               
break
;;
"Check node status")
echo "============================================================"
echo "Synchronization status must be false to continue!"
echo "============================================================"
echo "Synchronization status = $(curl -s localhost:26657/status)"
echo "Block height = $(nibid status 2>&1 | jq ."SyncInfo"."latest_block_height")"
echo "Skipped Blocks and Validator Creation Block $(nibid q slashing signing-info $(nibid tendermint show-validator))"
echo "============================================================"
break
;;
"Create validator")
echo "============================================================"
echo "Synchronization status must be false to continue!"
echo "Synchronization status = $(curl -s localhost:26657/status)"
echo "============================================================"

nibid tx staking create-validator \
--amount=1000000unibi \
--pubkey=$(nibid tendermint show-validator) \
--moniker="$NODENAME" \
--chain-id=nibiru-testnet-1 \
--commission-rate="0.01" \
--commission-max-rate="0.10" \
--commission-max-change-rate="0.01" \
--min-self-delegation="1000000" \
--from=$NODEWALLET \
-y
               
break
;;
"Parametrs and balance")
echo "============================================================"
echo "Your parameters"
echo "============================================================"
echo "Name Node: $NODENAME"
echo "Address: $NODEADDRWALL" 
echo "Your balance: $(nibid query bank balances $NODEADDRWALL)"
echo "============================================================"
break
;;
"Check validator") 
echo "============================================================"
echo "Account request: $(nibid q auth account $(nibid keys show $NODEADDRWALL -a) -o text)"
echo "Validator info: $(nibid q staking validator $NODEVAL)"
echo "============================================================"
break
;;
"Request for tokens in Discord")
echo "============================================================"
echo "In order to request tokens - you need to go https://discord.gg/7BC4JGyF in faucet and request token"
echo "============================================================"
echo -e "Your address $(nibid keys export $NODEWALLET)"
echo "============================================================"
break
;;
"Log Node")
journalctl -u nibid -f -o cat
break
;;
"Delete node")
systemctl stop nibid
systemctl disable nibid
rm /etc/systemd/system/nibid.service
rm -rf .nibid nibid
break
;;
"Exit")
exit
;;
*) echo "invalid option $REPLY";;
esac
done
done
